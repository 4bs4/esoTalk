<?php namespace esoTalk;

use Session;
use Auth;
use Section;

class Page {

	/**
	 * An array of data to pass to the page via the 'ET' JavaScript variable.
	 * 
	 * @var array
	 */
	protected static $data = array();
	
	/**
	 * Set a variable that can be accessed by JavaScript code on the page,
	 * as a property of the ET object.
	 *
	 * @param  string $key  The key to make $val accessible under.
	 * @param  mixed  $val  The value.
	 * @return void
	 */
	public static function data($key, $val)
	{
		static::$data[$key] = $val;
	}


	public static function head($val)
	{
		Section::append('head', $val);
	}

	public static function get_head()
	{
		$head = '<!-- This page was generated by esoTalk (http://esotalk.org) -->'.PHP_EOL;

		$head .= '<meta charset="'.T('general.charset', 'utf-8').'">'.PHP_EOL;

		$head .= '<title>'.static::get_title().'</title>'.PHP_EOL;

		// Add the canonical URL tag.
		if ( ! empty(static::$canonical_url))
			$head .= '<link rel="canonical" href="'.static::$canonical_url.'">'.PHP_EOL;

		$head .= Asset::container('global')->styles();
		$head .= Asset::container('default')->styles();
		$head .= Asset::container('global')->scripts();
		$head .= Asset::container('default')->scripts();

		$js = array(
			'id' => Auth::user()->id,
			'token' => Session::token(),
			'debug' => C('esoTalk.debug')
		) + (array)static::$data;
		$head .= '<script>var ET='.json_encode($js).'</script>';

		$head .= Section::yield('head');

		return $head;
	}

	protected static $title = '';

	public static function title($title)
	{
		static::$title = $title;
	}

	public static function get_title()
	{
		$parts = array(static::$title, C('esoTalk.forum_title'));

		return implode(' - ', Arr::without($parts, ''));
	}

	protected static $canonical_url;

	public static function canonical_url($url)
	{
		static::$canonical_url = $url;
	}

	public static function navigate()
	{
		
	}

	public static function get_back_button()
	{
		
	}

	protected static $body_class = '';

	public static function body_class($class)
	{
		static::$body_class .= $class;
	}

	public static function get_body_class()
	{
		return trim(static::$body_class);
	}

	public static function get_logo()
	{
		$logo = C('esoTalk.forum_logo');
		$title = C('esoTalk.forum_title');
		if ($logo)
		{
			$size = getimagesize($logo);
			return HTML::image($logo, $title, array('width' => $size[0], 'height' => $size[1]));
		}
		else
		{
			return $title;
		}
	}


	protected static $messages = array();
	
	/**
	 * Add a message to be displayed on the page. The messages will also be stored in the session so that if the
	 * controller redirects instead of rendering, they will be displayed on the next response.
	 *
	 * @param string $message The message text.
	 * @param mixed $options An array of options. Possible keys include:
	 * 		id: a unique ID for the message. If specified, this message will overwrite any previous messages with
	 * 			the same ID.
	 * 		className: the CSS class to apply to the message.
	 * 		callback: a JavaScript function to run when the message is dismissed.
	 * 		If $options is a string, it will be used as the className.
	 * @return void
	 */
	public static function flash($message, $options = "")
	{
		if ( ! is_array($options))
		{
			$options = array("className" => $options);
		}

		$options["message"] = $message;

		if ( ! empty($options["id"]))
		{
			static::$messages[$options["id"]] = $options;
		}
		else
		{
			static::$messages[] = $options;
		}

		Session::flash('messages', static::$messages);
	}

	public static function get_flash()
	{
		$messages = Session::get('messages', array());
		
		Session::forget('messages');
		
		return $messages;
	}

	public static function __callStatic($method, $parameters)
	{
		if (substr($method, 0, 6) == 'flash_')
		{
			return static::flash($parameters[0], substr($method, 6));
		}
	}

}